import cv2
import numpy as np
import math
import threading
import time
import rospy
from clover import srv
from std_srvs.srv import Trigger
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
bridge = CvBridge()
rospy.init_node('flight')

get_telemetry = rospy.ServiceProxy('get_telemetry', srv.GetTelemetry)
navigate = rospy.ServiceProxy('navigate', srv.Navigate)
navigate_global = rospy.ServiceProxy('navigate_global', srv.NavigateGlobal)
set_position = rospy.ServiceProxy('set_position', srv.SetPosition)
set_velocity = rospy.ServiceProxy('set_velocity', srv.SetVelocity)
set_attitude = rospy.ServiceProxy('set_attitude', srv.SetAttitude)
set_rates = rospy.ServiceProxy('set_rates', srv.SetRates)
land = rospy.ServiceProxy('land', Trigger)

hsv_min = np.array((0, 109, 95), np.uint8)
hsv_max = np.array((70, 255, 255), np.uint8)

color_yellow = (0, 255, 255)

cap = cv2.VideoCapture(0)

def navigate_wait(x=0, y=0, z=0, yaw=float('nan'), speed=0.5, frame_id='', auto_arm=False, tolerance=0.2):
    navigate(x=x, y=y, z=z, yaw=yaw, speed=speed, frame_id=frame_id, auto_arm=auto_arm)

    while not rospy.is_shutdown():
        telem = get_telemetry(frame_id='navigate_target')
        if math.sqrt(telem.x ** 2 + telem.y ** 2 + telem.z ** 2) < tolerance:
            break
        rospy.sleep(0.2)

def vision():
    def image_callback(data):
        img = bridge.imgmsg_to_cv2(data, 'bgr8')  # OpenCV image
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        thresh = cv2.inRange(hsv, hsv_min, hsv_max)
        blurred = cv2.GaussianBlur(thresh, (11, 11), 0)
        _, binary = cv2.threshold(blurred, 125, 255, cv2.THRESH_BINARY)

        moments = cv2.moments(binary, 1)
        dM01 = moments['m01']
        dM10 = moments['m10']
        dArea = moments['m00']

        contours, hierarchy = cv2.findContours(binary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        stencil = np.zeros(img.shape).astype(img.dtype)
        # img = cv2.fillPoly(stencil, contours, (255, 0, 255))
        # img = cv2.bitwise_and(img, stencil)
        img = cv2.drawContours(img, contours, -1, (255, 0, 0), 3)
        if dArea > 80:
            x = int(dM10 / dArea)
            y = int(dM01 / dArea)
            print("RED | x: %s y: %s" % (x, y))

        cv2.imshow("camera", img)

    image_sub = rospy.Subscriber('main_camera/image_raw', Image, image_callback)
    rospy.spin()


navigate(z=2,frame_id='body',auto_arm=True)
rospy.sleep(4)
telem = get_telemetry()
a = threading.Thread(target=vision)
a.start()
navigate_wait(x=5,speed=1,frame_id='navigate_target')
navigate_wait(x=telem.x,y=telem.y,z=telem.z,speed=1,frame_id='map')
land()
